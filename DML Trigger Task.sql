------------ PART 1 ------------

-- 1.1

CREATE OR REPLACE TRIGGER trg_insert_bonus
AFTER INSERT ON EMPLOYEES
FOR EACH ROW
BEGIN
    INSERT INTO EMPLOYEE_BONUS (EMPLOYEE_ID, BONUS)
    VALUES (:NEW.EMPLOYEE_ID, :NEW.SALARY * 0.10);
END;
/


-- Testing 

INSERT INTO EMPLOYEES (
    EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER,
    HIRE_DATE, JOB_ID, SALARY, DEPARTMENT_ID)
    VALUES (
    1001, 'Ashar', 'Naveed', 'ashar@gmail.com', '435363242',
    TO_DATE('17-JUN-04', 'DD-MON-YY'), 'IT_PROG', 53456, 60
);

SELECT * FROM EMPLOYEE_BONUS WHERE EMPLOYEE_ID = 1001;


-- 1.2

CREATE OR REPLACE TRIGGER trg_salary_check
BEFORE UPDATE OF SALARY ON EMPLOYEES
FOR EACH ROW
BEGIN
    IF :NEW.SALARY > 10000 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Salary exceeds by the limit of 10,000.');
    END IF;
END;
/

-- Testing 

UPDATE EMPLOYEES SET SALARY = 15000 WHERE EMPLOYEE_ID = 1001;


-- 1.3

CREATE TABLE DELETED_EMPLOYEES_LOG AS SELECT * FROM EMPLOYEES WHERE 1=0;

CREATE OR REPLACE TRIGGER trg_log_deleted_employees
BEFORE DELETE ON EMPLOYEES
FOR EACH ROW
BEGIN
    INSERT INTO DELETED_EMPLOYEES_LOG VALUES
    (:OLD.EMPLOYEE_ID, :OLD.FIRST_NAME, :OLD.LAST_NAME, :OLD.EMAIL,
     :OLD.PHONE_NUMBER, :OLD.HIRE_DATE, :OLD.JOB_ID, :OLD.SALARY,
     :OLD.COMMISSION_PCT, :OLD.MANAGER_ID, :OLD.DEPARTMENT_ID);
END;
/

-- Testing

DELETE FROM EMPLOYEES WHERE EMPLOYEE_ID = 1001;
SELECT * FROM DELETED_EMPLOYEES_LOG WHERE EMPLOYEE_ID = 1001;



-- 1.4


CREATE TABLE SALARY_UPDATE (
    EMPLOYEE_ID NUMBER,
    OLD_SALARY NUMBER,
    NEW_SALARY NUMBER,
    CHANGE_DATE DATE
);

CREATE OR REPLACE TRIGGER trg_salary_update
AFTER UPDATE OF SALARY ON EMPLOYEES
FOR EACH ROW
BEGIN
    INSERT INTO SALARY_UPDATE (EMPLOYEE_ID, OLD_SALARY, NEW_SALARY, CHANGE_DATE)
    VALUES (:OLD.EMPLOYEE_ID, :OLD.SALARY, :NEW.SALARY, SYSDATE);
END;
/


-- Testing

UPDATE EMPLOYEES SET SALARY = 9200 WHERE EMPLOYEE_ID = 100;
SELECT * FROM SALARY_UPDATE WHERE EMPLOYEE_ID = 100;



------------ PART 2 ------------

-- 2.1

CREATE TABLE AUDIT_LOG (
    TABLE_NAME VARCHAR2(100),
    CREATED_BY VARCHAR2(100),
    CREATED_AT DATE
);

CREATE OR REPLACE TRIGGER trg_audit_log_table
AFTER CREATE ON SCHEMA
BEGIN
    INSERT INTO AUDIT_LOG (TABLE_NAME, CREATED_BY, CREATED_AT)
    VALUES (ORA_DICT_OBJ_NAME, USER, SYSDATE);
END;
/

-- Testing 

CREATE TABLE TESTING_TABLE (
    ID NUMBER PRIMARY KEY,  
    FIRST_NAME VARCHAR2(25), 
    LAST_NAME VARCHAR2(25) 
);

SELECT * FROM AUDIT_LOG WHERE TABLE_NAME = 'TESTING_TABLE';



-- 2.2


CREATE OR REPLACE TRIGGER trg_prevent_changes_employees
BEFORE ALTER ON SCHEMA
DECLARE
    current_hour NUMBER := TO_NUMBER(TO_CHAR(SYSDATE, 'HH24'));
BEGIN
    IF ORA_DICT_OBJ_NAME = 'EMPLOYEES' AND (current_hour >= 18 OR current_hour < 8) THEN
        RAISE_APPLICATION_ERROR(-20002, 'Operations on EMPLOYEES Table are not allowed between (6PM to 8AM)');
    END IF;
END;
/

-- Testing

ALTER TABLE EMPLOYEES ADD (BONUS_AMOUNT NUMBER);


-- 2.3


CREATE TABLE DROP_LOG (
    TABLE_NAME VARCHAR2(100),
    DROPPED_BY VARCHAR2(100),
    DROP_TIME DATE
);

CREATE OR REPLACE TRIGGER trg_log_drops
BEFORE DROP ON SCHEMA
BEGIN
    INSERT INTO DROP_LOG (TABLE_NAME, DROPPED_BY, DROP_TIME)
    VALUES (ORA_DICT_OBJ_NAME, USER, SYSDATE);
END;
/

-- Testing

DROP TABLE TESTING_TABLE;
SELECT * FROM DROP_LOG WHERE TABLE_NAME = 'TESTING_TABLE';


-- 2.4

CREATE OR REPLACE TRIGGER trg_warning_drop_auditlog
BEFORE DROP ON SCHEMA
BEGIN

    IF ORA_DICT_OBJ_NAME = 'AUDIT_LOG' THEN
        RAISE_APPLICATION_ERROR(-20003, 'We are not allowed to drop the AUDIT_LOG table');
    END IF;
END;

-- Testing

DROP TABLE AUDIT_LOG;



------------ PART 3 ------------

-- 3.1

CREATE TABLE SYSTEM_LOGS (
    LOG_TIME DATE,
    STATUS VARCHAR2(50)
);


CREATE OR REPLACE TRIGGER trg_log_login
AFTER LOGON ON SCHEMA
BEGIN
    INSERT INTO SYSTEM_LOGS (LOG_TIME, STATUS)
    VALUES (SYSDATE, 'User Logged In');
END;
/


--3.2


CREATE TABLE FAILED_LOGINS (
    USERNAME VARCHAR2(30),
    ATTEMPT_TIME DATE
);

CREATE OR REPLACE TRIGGER trg_failed_logins
AFTER SERVERERROR ON DATABASE
BEGIN
    IF (IS_SERVERERROR(1017)) THEN
        INSERT INTO FAILED_LOGINS (USERNAME, ATTEMPT_TIME)
        VALUES (SYS_CONTEXT('USERENV', 'SESSION_USER'), SYSDATE);
    END IF;
END;
/





-- 3.3


CREATE TABLE USER_ACTIVITY_LOG (
    USERNAME VARCHAR2(30),
    LOGIN_TIME DATE,
    LOGOUT_TIME DATE,
    SESSION_DURATION INTERVAL DAY TO SECOND
);

CREATE OR REPLACE TRIGGER trg_user_logout
BEFORE LOGOFF ON DATABASE
DECLARE
    v_login_time DATE;
BEGIN
    SELECT LOGON_TIME INTO v_login_time
    FROM V$SESSION
    WHERE AUDSID = USERENV('SESSIONID') AND USERNAME = SYS_CONTEXT('USERENV', 'SESSION_USER');

    INSERT INTO USER_ACTIVITY_LOG (USERNAME, LOGIN_TIME, LOGOUT_TIME, SESSION_DURATION)
    VALUES (SYS_CONTEXT('USERENV', 'SESSION_USER'), v_login_time, SYSDATE, SYSDATE - v_login_time);
EXCEPTION
    WHEN NO_DATA_FOUND THEN NULL;
END;
/



------------ PART 4 ------------


-- 4.1

CREATE OR REPLACE VIEW emp_dept_view AS
SELECT e.employee_id, e.first_name, e.last_name, e.salary, 
       d.department_id, d.department_name
FROM employees e
JOIN departments d ON e.department_id = d.department_id;


-- Creating Trigger for it then
CREATE OR REPLACE TRIGGER trg_emp_dept
INSTEAD OF INSERT ON emp_dept_view
FOR EACH ROW
DECLARE
    v_dept_id NUMBER;
BEGIN

    BEGIN
        SELECT department_id INTO v_dept_id
        FROM departments
        WHERE department_id = :NEW.department_id;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN

            INSERT INTO departments (department_id, department_name)
            VALUES (:NEW.department_id, :NEW.department_name);
    END;
    
    INSERT INTO employees (employee_id, first_name, last_name, salary, department_id)
    VALUES (:NEW.employee_id, :NEW.first_name, :NEW.last_name, :NEW.salary, :NEW.department_id);
END;
/



-- 4.2



CREATE OR REPLACE VIEW EMPLOYEE_SALARIES AS
SELECT EMPLOYEE_ID, SALARY FROM EMPLOYEES;

CREATE OR REPLACE TRIGGER trg_preventsalary_red
INSTEAD OF UPDATE ON EMPLOYEE_SALARIES
FOR EACH ROW
BEGIN
    IF :NEW.SALARY < :OLD.SALARY * 0.80 THEN
        RAISE_APPLICATION_ERROR(-20004, 'Salary cannot be reduced by more than 20%.');
    ELSE
        UPDATE EMPLOYEES
        SET SALARY = :NEW.SALARY
        WHERE EMPLOYEE_ID = :OLD.EMPLOYEE_ID;
    END IF;
END;
/